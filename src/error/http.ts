import { StatusCodes } from "#utils";
import { ApiError } from "./api.js";


const mapping = {
  [StatusCodes.accepted]: { code: "ACCEPTED", message: "Accepted" },
  [StatusCodes.badGateway]: { code: "BAD_GATEWAY", message: "Bad Gateway" },
  [StatusCodes.badRequest]: { code: "BAD_REQUEST", message: "Bad Request" },
  [StatusCodes.conflict]: { code: "CONFLICT", message: "Conflict" },
  [StatusCodes.continue]: { code: "CONTINUE", message: "Continue" },
  [StatusCodes.created]: { code: "CREATED", message: "Created" },
  [StatusCodes.expectationFailed]: { code: "EXPECTATION_FAILED", message: "Expectation Failed" },
  [StatusCodes.failedDependency]: { code: "FAILED_DEPENDENCY", message: "Failed Dependency" },
  [StatusCodes.forbidden]: { code: "FORBIDDEN", message: "Forbidden" },
  [StatusCodes.gatewayTimeout]: { code: "GATEWAY_TIMEOUT", message: "Gateway Timeout" },
  [StatusCodes.gone]: { code: "GONE", message: "Gone" },
  [StatusCodes.httpVersionNotSupported]: { code: "HTTP_VERSION_NOT_SUPPORTED", message: "HTTP Version Not Supported" },
  [StatusCodes.imATeapot]: { code: "IM_A_TEAPOT", message: "I'm a teapot" },
  [StatusCodes.insufficientSpaceOnResource]: { code: "INSUFFICIENT_SPACE_ON_RESOURCE", message: "Insufficient Space on Resource" },
  [StatusCodes.insufficientStorage]: { code: "INSUFFICIENT_STORAGE", message: "Insufficient Storage" },
  [StatusCodes.internalServerError]: { code: "INTERNAL_SERVER_ERROR", message: "Internal Server Error" },
  [StatusCodes.lengthRequired]: { code: "LENGTH_REQUIRED", message: "Length Required" },
  [StatusCodes.locked]: { code: "LOCKED", message: "Locked" },
  [StatusCodes.methodFailure]: { code: "METHOD_FAILURE", message: "Method Failure" },
  [StatusCodes.methodNotAllowed]: { code: "METHOD_NOT_ALLOWED", message: "Method Not Allowed" },
  [StatusCodes.movedPermanently]: { code: "MOVED_PERMANENTLY", message: "Moved Permanently" },
  [StatusCodes.movedTemporarily]: { code: "MOVED_TEMPORARILY", message: "Moved Temporarily" },
  [StatusCodes.multiStatus]: { code: "MULTI_STATUS", message: "Multi-Status" },
  [StatusCodes.multipleChoices]: { code: "MULTIPLE_CHOICES", message: "Multiple Choices" },
  [StatusCodes.networkAuthenticationRequired]: { code: "NETWORK_AUTHENTICATION_REQUIRED", message: "Network Authentication Required" },
  [StatusCodes.noContent]: { code: "NO_CONTENT", message: "No Content" },
  [StatusCodes.nonAuthoritativeInformation]: { code: "NON_AUTHORITATIVE_INFORMATION", message: "Non Authoritative Information" },
  [StatusCodes.notAcceptable]: { code: "NOT_ACCEPTABLE", message: "Not Acceptable" },
  [StatusCodes.notFound]: { code: "NOT_FOUND", message: "Not Found" },
  [StatusCodes.notImplemented]: { code: "NOT_IMPLEMENTED", message: "Not Implemented" },
  [StatusCodes.notModified]: { code: "NOT_MODIFIED", message: "Not Modified" },
  [StatusCodes.ok]: { code: "OK", message: "OK" },
  [StatusCodes.partialContent]: { code: "PARTIAL_CONTENT", message: "Partial Content" },
  [StatusCodes.paymentRequired]: { code: "PAYMENT_REQUIRED", message: "Payment Required" },
  [StatusCodes.permanentRedirect]: { code: "PERMANENT_REDIRECT", message: "Permanent Redirect" },
  [StatusCodes.preconditionFailed]: { code: "PRECONDITION_FAILED", message: "Precondition Failed" },
  [StatusCodes.preconditionRequired]: { code: "PRECONDITION_REQUIRED", message: "Precondition Required" },
  [StatusCodes.processing]: { code: "PROCESSING", message: "Processing" },
  [StatusCodes.earlyHints]: { code: "EARLY_HINTS", message: "Early Hints" },
  [StatusCodes.upgradeRequired]: { code: "UPGRADE_REQUIRED", message: "Upgrade Required" },
  [StatusCodes.proxyAuthenticationRequired]: { code: "PROXY_AUTHENTICATION_REQUIRED", message: "Proxy Authentication Required" },
  [StatusCodes.requestHeaderFieldsTooLarge]: { code: "REQUEST_HEADER_FIELDS_TOO_LARGE", message: "Request Header Fields Too Large" },
  [StatusCodes.requestTimeout]: { code: "REQUEST_TIMEOUT", message: "Request Timeout" },
  [StatusCodes.requestTooLong]: { code: "REQUEST_TOO_LONG", message: "Request Entity Too Large" },
  [StatusCodes.requestUriTooLong]: { code: "REQUEST_URI_TOO_LONG", message: "Request-URI Too Long" },
  [StatusCodes.requestedRangeNotSatisfiable]: { code: "REQUESTED_RANGE_NOT_SATISFIABLE", message: "Requested Range Not Satisfiable" },
  [StatusCodes.resetContent]: { code: "RESET_CONTENT", message: "Reset Content" },
  [StatusCodes.seeOther]: { code: "SEE_OTHER", message: "See Other" },
  [StatusCodes.serviceUnavailable]: { code: "SERVICE_UNAVAILABLE", message: "Service Unavailable" },
  [StatusCodes.switchingProtocols]: { code: "SWITCHING_PROTOCOLS", message: "Switching Protocols" },
  [StatusCodes.temporaryRedirect]: { code: "TEMPORARY_REDIRECT", message: "Temporary Redirect" },
  [StatusCodes.tooManyRequests]: { code: "TOO_MANY_REQUESTS", message: "Too Many Requests" },
  [StatusCodes.unauthorized]: { code: "UNAUTHORIZED", message: "Unauthorized" },
  [StatusCodes.unavailableForLegalReasons]: { code: "UNAVAILABLE_FOR_LEGAL_REASONS", message: "Unavailable For Legal Reasons" },
  [StatusCodes.unprocessableEntity]: { code: "UNPROCESSABLE_ENTITY", message: "Unprocessable Entity" },
  [StatusCodes.unsupportedMediaType]: { code: "UNSUPPORTED_MEDIA_TYPE", message: "Unsupported Media Type" },
  [StatusCodes.useProxy]: { code: "USE_PROXY", message: "Use Proxy" },
  [StatusCodes.misdirectedRequest]: { code: "MISDIRECTED_REQUEST", message: "Misdirected Request" }
} as const;

export function httpError(code: StatusCodes): ApiError {
  const e = mapping[code] ?? mapping[StatusCodes.internalServerError];
  return new ApiError({ status: code ?? StatusCodes.internalServerError, ...e });
}
